coinbase_spot_ticker:
  loglevel: 30 #info:20 w:30 e:40 C:50, both fetcher and injector loglevel
  api: 'wss://ws-feed.exchange.coinbase.com'
  subscribe: >
    {
    "type": "subscribe",
    "product_ids": [
        "BTC-USD",
        "ETH-USD"
    ],
    "channels": [
        {   
            "name": "ticker",
            "product_ids": [
                "BTC-USD",
                "ETH-USD"
            ]
        }
    ]
    }
  jdata: ''
  jdata_wanted:
    - 'product_id'
    - 'price'
    - 'volume_24h'
    - 'volume_30d'
    - 'best_bid'
    - 'best_ask'
    - 'side'
    - 'time'
    - 'trade_id'
    - 'last_size'
  ins_sub_query: >
    o->>'product_id' as "product_id",
    (o->>'price')::float as "price",
    (o->>'volume_24h')::float as "volume_24h",
    (o->>'volume_30d')::float as "volume_30d",
    (o->>'best_bid')::float as "best_bid",
    (o->>'best_ask')::float as "best_ask",
    o->>'side' as "side",
    (o->>'time')::timestamp as "time" ,
    (o->>'trade_id')::integer as "trade_id",
    (o->>'last_size')::float  as "last_size"

bitmex_instrument:
  api: 'https://www.bitmex.com'
  apitype: 'rest'
  intval: 2
  subscribe:
    - '/api/v1/instrument': 'GET'
      symbol: 'XBT'
      reverse: 'false'
    - '/api/v1/instrument': 'GET'
      symbol: 'ETH'
      reverse: 'false'
  jdata: ''
  jdata_wanted:
    - 'symbol'
    - 'markPrice'
    - 'openInterest'
    - 'openValue'
    - 'fundingRate'
  ins_sub_query: >
    (o->>'symbol')::varchar as "symbol",
    (o->>'openInterest')::integer as "openInterest",
    (o->>'openValue')::bigint as "openValue",
    (o->>'markPrice')::float as "markPrice",
    (o->>'midPrice')::float as "midPrice",
    (o->>'vwap')::float as "vwap",
    (o->>'fundingRate')::float as "fundingRate",
    (o->>'indicativeFundingRate')::float as "indicativeFundingRate",
    (o->>'timestamp')::timestamp as "ts"

bitstamp_spot_btcusd:
  api: 'wss://ws.bitstamp.net'
  subscribe: >
     { 
       "event": "bts:subscribe",
        "data": {
                "channel": "live_trades_btcusd"
        }
     }
  jdata_wanted:
    - 'timestamp'
    - 'amount'
    - 'price'
  dst_table: "bitstamp_spot"
  ins_sub_query: >
    to_timestamp((o->>'timestamp')::bigint) as "ts",
    (o->>'amount')::float as "amount",
    (o->>'price')::float as "price",
    (o->>'type')::smallint as "type",
    'BTCUSD' as "symbol"
 

bitstamp_spot_ethusd:
  loglevel: 20
  api: 'wss://ws.bitstamp.net'
  subscribe: >
     { 
       "event": "bts:subscribe",
        "data": {
                "channel": "live_trades_ethusd"
        }
     }
  jdata_wanted:
    - 'timestamp'
    - 'amount'
    - 'price'
  dst_table: "bitstamp_spot"
  ins_sub_query: >
    to_timestamp((o->>'timestamp')::bigint) as "ts",
    (o->>'amount')::float as "amount",
    (o->>'price')::float as "price",
    (o->>'type')::smallint as "type",
    'ETHUSD' as "symbol"
 
binance_spot_aggtrade:
  exchange: 'binance'
    # https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
    # Only market trades will be aggregated, which means the insurance fund trades and ADL trades won't be aggregated.
    # ?? where can I find ADL and insurance trade ?
  loglevel: 20
  api: 'wss://stream.binance.com:9443/stream'
  subscribe:  >
    {
        "method": "SUBSCRIBE",
        "params":
                [ "btcusdt@aggTrade", "ethbtc@aggTrade", "ethusdt@aggTrade"],
        "id": 1
    }

  dst_table: 'binance_spot_aggtrade'
  ins_sub_query: >
    to_timestamp((o->>'E')::bigint/1000) as "EventTime" ,
    o->>'s' as "Symbol",
    (o->>'p')::float as "Price",
    (o->>'q')::float as "Quantity",
    (o->>'f')::bigint as "FirstTid",
    (o->>'l')::bigint as "LastTid",
    to_timestamp((o->>'T')::bigint/1000)  as "TradeTime",
    (o->>'m')::bool  as "BMM"
