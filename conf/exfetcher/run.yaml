binance_fut_mark_price:
  subscribe:  >
    {
        "method": "SUBSCRIBE",
        "params":
                [ "btcusdt@markPrice@1s","ethusdt@markPrice@1s" ],
        "id": 1
    }
  api: 'wss://fstream.binance.com/stream'
  jdata_wanted:
    - 'E'
    - 's'
    - 'P'
    - 'p'
    - 'i'
    - 'r'
    - 'T'
  dst_table: 'binance_fut_all_mark_price'
  ins_sub_query: >
    to_timestamp((o->>'E')::bigint/1000) as "EventTime" ,
    o->>'s' as "Symbol",
    (o->>'p')::float as "MarkPrice",
    (o->>'P')::float as "IndexPrice",
    (o->>'i')::float as "EstSettlePrice",
    (o->>'r')::float  as "FundingRate",
    to_timestamp((o->>'T')::bigint/1000)  as "NextFundingTime"

binance_fut_aggtrade:
    # https://binance-docs.github.io/apidocs/futures/en/#aggregate-trade-streams
    # Only market trades will be aggregated, which means the insurance fund trades and ADL trades won't be aggregated.
    # ?? where can I find ADL and insurance trade ?
  api: 'wss://fstream.binance.com/stream'
  subscribe:  >
    {
        "method": "SUBSCRIBE",
        "params":
                [ "btcusdt@aggTrade", "ethusdt@aggTrade"],
        "id": 1
    }
  jdata_wanted:
    - 'E'
    - 's'
    - 'a'
    - 'p'
    - 'q'
    - 'f'
    - 'l'
    - 'T'
    - 'm'
  dst_table: 'binance_fut_aggtrade'
  ins_sub_query: >
    to_timestamp((o->>'E')::bigint/1000) as "EventTime" ,
    o->>'s' as "Symbol",
    (o->>'a')::bigint as "AggTradeId",
    (o->>'p')::float as "Price",
    (o->>'q')::float as "Quantity",
    (o->>'f')::bigint as "FirstTid",
    (o->>'l')::bigint as "LastTid",
    to_timestamp((o->>'T')::bigint/1000)  as "TradeTime",
    (o->>'m')::bool  as "BMM"

binance_open_interest:
  api: 'https://fapi.binance.com'
  apitype: 'rest'
  intval: 20
  jdata: ''
  jdata_wanted:
    - 'symbol'
    - 'openInterest'
    - 'time'
  subscribe:
    - '/fapi/v1/openInterest': 'GET'
      symbol: 'BTCUSDT'
    - '/fapi/v1/openInterest': 'GET'
      symbol: 'ETHUSDT'
  ins_sub_query: >
    o->>'symbol' as "Symbol",
    (o->>'openInterest')::float as "openInterest",
    to_timestamp((o->>'time')::bigint/1000) as "LastUpdateTime" 

bitmex_trade_xbtusd:
  api: 'wss://ws.bitmex.com/realtime'
  apitype: 'wss'
  subscribe: >
    {"op": "subscribe", "args": ["trade:XBTUSD"]}
  jdata_wanted:
    - 'timestamp'
    - 'side'
    - 'size'
    - 'price'
    - 'grossValue'
    - 'homeNotional'
  ins_sub_query: >
    (o->>'timestamp')::timestamp(0) as "tt" ,
    o->>'side' as "side",
    (o->>'size')::integer as "integer",
    (o->>'price')::float as "price",
    (o->>'grossValue')::float as "grossValue",
    (o->>'homeNotional')::float as "homeNotional"

coinbase_spot_ticker:
  api: 'wss://ws-feed.exchange.coinbase.com'
  subscribe: >
    {
    "type": "subscribe",
    "product_ids": [
        "BTC-USD",
        "ETH-USD"
    ],
    "channels": [
        {   
            "name": "ticker",
            "product_ids": [
                "BTC-USD",
                "ETH-USD"
            ]
        }
    ]
    }
  jdata: ''
  jdata_wanted:
    - 'product_id'
    - 'price'
    - 'volume_24h'
    - 'volume_30d'
    - 'best_bid'
    - 'best_ask'
    - 'side'
    - 'time'
    - 'trade_id'
    - 'last_size'
  ins_sub_query: >
    o->>'product_id' as "product_id",
    (o->>'price')::float as "price",
    (o->>'volume_24h')::float as "volume_24h",
    (o->>'volume_30d')::float as "volume_30d",
    (o->>'best_bid')::float as "best_bid",
    (o->>'best_ask')::float as "best_ask",
    o->>'side' as "side",
    (o->>'time')::timestamp as "time" ,
    (o->>'trade_id')::integer as "trade_id",
    (o->>'last_size')::float  as "last_size"

